ID,Name,Description,Severity,URL,Remediation Advice,Line Number,Scan Result,Scan Score,Module
CWE-111,Direct Use of Unsafe JNI,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.",Low,https://cwe.mitre.org/data/definitions/111.html,Implement error handling around JNI call; do not use JNI calls if native library is not trusted; use Java API equivalents if they exist,4,Fail,66,vulnerable.java
CWE-500,Public Static Field Not Marked Final,"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",Low,https://cwe.mitre.org/data/definitions/500.html,"Clearly identify the scope for all critical data elements, including whether they should be regarded as static. Make any static fields private and constant.",7,Fail,66,vulnerable.java
CWE-798,Use of Hard-coded Credentials,"The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",Low,https://cwe.mitre.org/data/definitions/798.html,Credentials should be hashed and stored safely in a password-protected external file,10,Fail,66,vulnerable.java
CWE-259,Use of Hard-coded Password,"The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",Low,https://cwe.mitre.org/data/definitions/259.html,Passwords should be hashed and stored safely in a password-protected external file,14,Fail,66,vulnerable.java
CWE-766,Critical Data Element Declared Public,"The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.",Low,https://cwe.mitre.org/data/definitions/766.html,"Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.",14,Fail,66,vulnerable.java
CWE-321,Use of Hard-coded Cryptographic Key,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,Low,https://cwe.mitre.org/data/definitions/321.html,Cryptographic keys should be stored safely in a password-protected external file,17,Fail,66,vulnerable.java
CWE-397,Declaration of Throws for Generic Exception,Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,Low,https://cwe.mitre.org/data/definitions/397.html,Define the specific exceptions that should be thrown.,20,Fail,66,vulnerable.java
CWE-481,Assigning instead of Comparing,The code uses an operator for assignment when the intention was to perform a comparison.,Low,https://cwe.mitre.org/data/definitions/481.html,Check operator used is correct. For example == is used for comparison and = is used for assignment.,26,Fail,66,vulnerable.java
CWE-491,Public cloneable() Method Without Final ('Object Hijack'),"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",Low,https://cwe.mitre.org/data/definitions/491.html,Make the cloneable() method final.,32,Fail,66,vulnerable.java
CWE-493,Critical Public Variable Without Final Modifier,"The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.",Low,https://cwe.mitre.org/data/definitions/493.html,"Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.",37,Fail,66,vulnerable.java
CWE-582,"Array Declared Public, Final, and Static","The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.",Low,https://cwe.mitre.org/data/definitions/582.html,The array should be made private.,40,Fail,66,vulnerable.java
CWE-583,finalize() Method Declared Public,The product violates secure coding principles for mobile code by declaring a finalize() method public.,Low,https://cwe.mitre.org/data/definitions/583.html,"If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.",43,Fail,66,vulnerable.java
CWE-595,Comparison of Object References Instead of Object Contents,"The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects",Low,https://cwe.mitre.org/data/definitions/595.html,The equals() method should be used used to compare objects instead of ==,49,Fail,66,vulnerable.java
CWE-89,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component",Critical,"https://cwe.mitre.org/data/definitions/89.html, https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","Prepared statements, client and server side input validation, safe stored procedures, or escaping user input can be used to mitigate against SQL injection attacks. Refer to OWASP cheat sheet for examples.",63,Fail,66,vulnerable.java
CWE-209,Generation of Error Message Containing Sensitive Information,"The product generates an error message that includes sensitive information about its environment, users, or associated data.",Low,https://cwe.mitre.org/data/definitions/209.html,"When an exception is caught, only print insensitive and desired data to a user.",68,Fail,66,vulnerable.java
CWE-190,Integer Overflow or Wraparound,"An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number.",Low,https://cwe.mitre.org/data/definitions/190.html,Implement exception handling; use another data type such as Long or BigInteger if performing operations close to the maximum of an Integer,71,Fail,66,vulnerable.java
CWE-191,Integer Underflow (Wrap or Wraparound),"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",Low,https://cwe.mitre.org/data/definitions/191.html,Implement exception handling; use another data type such as Long or BigInteger if performing operations close to the minimum of an Integer,74,Fail,66,vulnerable.java
CWE-246,J2EE Bad Practices: Direct Use of Sockets,The J2EE application directly uses sockets instead of using framework method calls.,Low,https://cwe.mitre.org/data/definitions/246.html,Use framework method calls instead of using sockets directly.,77,Fail,66,vulnerable.java
CWE-326,Inadequate Encryption Strength,"The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",Low,https://cwe.mitre.org/data/definitions/326.html,"Use trusted libraries/APIs that create encryption keys using best practices or define long, complex strings with a variety of letters, digits, upper and lowercase, and special characters.",81,Fail,66,vulnerable.java
CWE-382,J2EE Bad Practices: Use of System.exit(),"A J2EE application uses System.exit(), which also shuts down its container.",Low,https://cwe.mitre.org/data/definitions/382.html,Shutdown function should be a privileged function only available to an authorised administrative user. Web applications should not call System.exit() as it can cause the virtual machine to exit.,90,Fail,66,vulnerable.java
CWE-395,Use of NullPointerException Catch to Detect NULL Pointer Dereference,Catching NullPointerException should not be used as an alternative to programmatic checks to prevent de-referencing a null pointer.,Low,https://cwe.mitre.org/data/definitions/395.html,Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.,96,Fail,66,vulnerable.java
CWE-396,Declaration of Catch for Generic Exception,Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,Low,https://cwe.mitre.org/data/definitions/396.html,Define specific exceptions and use multiple catch blocks if necessary.,103,Fail,66,vulnerable.java
CWE-572,Call to Thread run() instead of start(),"The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",Low,https://cwe.mitre.org/data/definitions/572.html,Use the start() method instead of the run() method.,109,Fail,66,vulnerable.java
CWE-585,Empty Synchronized Block,An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.,Low,https://cwe.mitre.org/data/definitions/585.html,Remove empty synchronised block or define procedures that access or modify data that is exposed to multiple threads,112,Fail,66,vulnerable.java
CWE-586,Explicit Call to Finalize(),The product makes an explicit call to the finalize() method from outside the finalizer.,Low,https://cwe.mitre.org/data/definitions/586.html,Do not make explicit calls to finalize().,115,Fail,66,vulnerable.java
